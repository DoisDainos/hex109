***** GRADER INSTRUCTIONS *****

Compile this on unix.ucsc.edu.

HOW TO COMPILE:
    make

HOW TO RUN: 
    ./asg5

***** ENVIRONMENTS/COMPILERS TESTED *****

unix.ucsc.edu/g++ v4.4.6
MacOS-10.8.3/g++ v4.8.0

***** WHAT DID I LEARN *****

By doing this assignment I learned how to squeeze performance out of a C++ program by use of G++ optimization settings and multithreading. I also learned how to implement a Monte Carlo method, and how to create a minimax tree through recursion. I also learned that the minimax tree was really just wishful thinking, because the heft of calculation required to take advantage of it was much more than a normal computer could provide. At first I implemented just the Monte Carlo method and got it working reliably for a few thousand iterations. Then I implemented the minimax tree to search further plies, bottoming out at a Monte Carlo calculation. What I found is that my computer was unable even to calculate a second ply down in the minimax tree using a reasonable amount of Monte Carlo iterations. I attempted to add a more sophisticated component which would use Monte Carlo to select a top 10 moves list to be investigated one ply further, but unfortunately I ran out of time, and also my code base didn’t lend itself terribly well to integrating this concept.

I can see Monte Carlo being useful for all kinds of different things though. While I’m surprised at how good its performance is as a Hex AI, at the same time, I’ve figured out how to beat it pretty consistently on an 11x11 board.